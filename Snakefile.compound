
OUTPUTS.extend([

])


rule all_compounds:
    input:
        "reference/compound/pharmacodb.table",
        "reference/compound/prism.table",
        "reference/compound/g2p.table",
        "reference/compound/dgidb.table",
        "reference/compound/gdc.table",
        "reference/compound/drugbank.table"
		output:
				"reference/compound/all.table"
		shell:
				"cat {input} | sort | uniq > reference/compound/all.table"

rule chembl_download:
    output:
      "source/chembl/chembl_27_sqlite.tar.gz"
    shell:
      "curl -o source/chembl/chembl_27_sqlite.tar.gz ftp://ftp.ebi.ac.uk/pub/databases/chembl/ChEMBLdb/latest/chembl_27_sqlite.tar.gz"

rule chembl_untar:
    input:
      "source/chembl/chembl_27_sqlite.tar.gz"
    output:
      "source/chembl/chembl_27/chembl_27_sqlite/chembl_27.db"
    shell:
      "cd source/chembl && tar xvzf chembl_27_sqlite.tar.gz"

rule pubchem_synonyms:
    output:
      "source/pubchem/CID-Synonym-filtered.gz"
    shell:
      "curl -o source/pubchem/CID-Synonym-filtered.gz ftp://ftp.ncbi.nlm.nih.gov/pubchem/Compound/Extras/CID-Synonym-filtered.gz"

rule pubchem_synonyms_index:
    input:
      "source/pubchem/CID-Synonym-filtered.gz"
    output:
      "source/pubchem/CID-Synonym-filtered.gz.sqlite"
    shell:
      "./transform/compound/chem_scan.py -s source/pubchem/CID-Synonym-filtered.gz index"

rule mapping:
    input:
        "reference/compound/{project}.terms"
    output:
        "reference/compound/{project}.search"
    shell:
        "./transform/compound/chem_scan.py -d source/chembl/chembl_27/chembl_27_sqlite/chembl_27.db -s source/pubchem/CID-Synonym-filtered.gz search reference/compound/{wildcards.project}.terms > reference/compound/{wildcards.project}.search"

rule prism_list:
    output:
        "reference/compound/{project}.terms"
    shell:
        "./transform/compound/compound_scan.py pre-outputs/{wildcards.project}/ > reference/compound/{wildcards.project}.terms"

rule dedup:
    input:
        "reference/compound/{project}.search",
        "source/chembl/chembl_27/chembl_27_sqlite/chembl_27.db",
        "source/pubchem/CID-Synonym-filtered.gz",
        "source/pubchem/CID-Synonym-filtered.gz.sqlite"
    output:
        "reference/compound/{project}.table"
    shell:
        "./transform/compound/chem_scan.py -d source/chembl/chembl_27/chembl_27_sqlite/chembl_27.db -s source/pubchem/CID-Synonym-filtered.gz dedup reference/compound/{wildcards.project}.search > reference/compound/{wildcards.project}.table"


rule chembl_extract:
    input:
      "source/chembl/chembl_27/chembl_27_sqlite/chembl_27.db",
      "reference/compound/all.table"
    output:
      "pre-outputs/compound/output.json"
    shell:
      """
      docker build -t bmeg-etl-compound transform/compound/
      cwltool --outdir pre-outputs/compound transform/compound/chembl_extract.cwl.yaml --chemblDB source/chembl/chembl_27/chembl_27_sqlite/chembl_27.db --idFile reference/compound/all.table --column 1
      """


rule chembl_transform:
    input:
      "pre-outputs/compound/output.json"
    output:
      "pre-outputs/compound/chembExtract.compound.json.gz"
    shell:
      "sifter run --o pre-outputs/compound/ transform/compound/chembl_extract.transform.yaml"

rule chembl_vertex:
    output:
      "outputs/compound/Compound.Compound.Vertex.json.gz"
    input:
      "pre-outputs/compound/chembExtract.compound.json.gz"
    shell:
      "sifter graph --m transform/compound/mapping.yaml --o outputs/compound/ src/bmeg/bmeg-dictionary/gdcdictionary/schemas/ pre-outputs/compound/"
