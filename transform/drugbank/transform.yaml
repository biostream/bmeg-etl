class: Playbook
name: "drugbank"
schema: ../../src/bmeg/bmeg-dictionary/gdcdictionary/schemas/
inputs:
  drugBank:
    type: File
    default: ../../source/drugbank/full_database.xml
steps:
  - xmlLoad:
      input: "{{inputs.drugBank}}"
      transform:
          #- debug: {}
          - map:
              python: >
                def forceList(x):
                  if isinstance(x,list):
                    return x
                  return [x]
                def f(x):
                  for d in forceList(x["drug"]["drugbank-id"]):
                    if d.startswith("DB"):
                      x["submitter_id"] = d
                  x["publications"] = []
                  for d in forceList(x["drug"]["general-references"]["articles"]):
                    if isinstance(d, dict):
                      x["publications"].append(d["article"]["pubmed-id"])
                  x['compound'] = ""
                  if 'external-identifiers' in x['drug']:
                    for d in forceList(x['drug']['external-identifiers']):
                      if isinstance(d, dict):
                        x['compound'] = d['external-identifier']['identifier']
                  x['proteins'] = []
                  for target in forceList(x['drug']['targets']):
                    if isinstance(target, dict):
                      if 'polypeptide' in target['target']:
                        if 'external-identifiers' in target['target']['polypeptide']:
                          if 'external-identifier' in target['target']['polypeptide']['external-identifiers']:
                            if 'UniProt Accession' == target['target']['polypeptide']['external-identifiers']['external-identifier']['resource']:
                              v = target['target']['polypeptide']['external-identifiers']['external-identifier']['identifier']
                              x['proteins'].append(v)
                            elif 'id' in target['target']:
                              v = target["target"]["id"]
                              x['proteins'].append(v)
                          elif 'id' in target['target']:
                            v = target["target"]["id"]
                            x['proteins'].append(v)
                      elif 'id' in target['target']:
                        v = target["target"]["id"]
                        x['proteins'].append(v)
                  return x
              method: f
          - filter:
              python: >
                def f(x):
                  return len(x['proteins']) > 0
              method: f
              steps:
                - project:
                    mapping:
                        project_id: "Project:Drugbank"
                        association_type: "{{row.drug.targets.target.actions.action}}"
                        type: drug_gene
                - objectCreate:
                    class: gene_drug_association
